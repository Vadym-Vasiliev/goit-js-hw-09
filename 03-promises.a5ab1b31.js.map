{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,EAAO,CACXC,OAAQC,SAASC,cAAc,UAGjCH,EAAKC,OAAOG,iBAAiB,UAAU,SAAAC,GACrCA,EAAMC,iBACN,IAAIC,EAAaC,OAAOR,EAAKC,OAAOQ,SAASC,MAAMC,OAC/CC,EAAOJ,OAAOR,EAAKC,OAAOQ,SAASG,KAAKD,OACxCE,EAASb,EAAKC,OAAOQ,SAASI,OAAOF,MAEzCG,YAAW,WACT,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,GAAK,EAC/BC,EAAcJ,EAAOG,EAAGA,EAAI,GACzBE,MAAK,SAAAC,G,IAAGR,EAAKQ,EAALR,MAAOS,EAAQD,EAARC,SACdrB,EAAAsB,OAAOC,QACL,uBAAwCC,OAAfH,EAAS,QAAyBG,OAAnBf,EAAaG,EAAM,UAG9Da,OAAM,SAAAL,G,IAAGR,EAAKQ,EAALR,MAAOS,EAAQD,EAARC,SACfrB,EAAAsB,OAAOI,QACL,sBAAuCF,OAAfH,EAAS,QAAyBG,OAAnBf,EAAaG,EAAM,YAIjEH,MAGL,IAAMS,EAAgB,SAACN,EAAOS,GAC5B,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtChB,YAAW,WACLc,EACFF,EAAQ,CAAEhB,QAAOS,aAEjBQ,EAAO,CAAEjB,QAAOS,eAEjBT,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n//достукались\nconst refs = {\n  formEl: document.querySelector('.form'),\n};\n\nrefs.formEl.addEventListener('submit', event => {\n  event.preventDefault();\n  let firstDelay = Number(refs.formEl.elements.delay.value);\n  let step = Number(refs.formEl.elements.step.value);\n  let amount = refs.formEl.elements.amount.value;\n\n  setTimeout(() => {\n    for (let i = 0; i < amount; i += 1) {\n      createPromise(step * i, i + 1)\n        .then(({ delay, position }) => {\n          Notify.success(\n            `✅ Fulfilled promise ${position} in ${firstDelay + delay}ms`\n          );\n        })\n        .catch(({ delay, position }) => {\n          Notify.failure(\n            `❌ Rejected promise ${position} in ${firstDelay + delay}ms`\n          );\n        });\n    }\n  }, firstDelay);\n});\n\nconst createPromise = (delay, position) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() < 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ delay, position });\n      } else {\n        reject({ delay, position });\n      }\n    }, delay);\n  });\n};\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","formEl","document","querySelector","addEventListener","event","preventDefault","firstDelay","Number","elements","delay","value","step","amount","setTimeout","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","Notify","success","concat","catch","failure","Promise","resolve","reject","shouldResolve","Math","random"],"version":3,"file":"03-promises.a5ab1b31.js.map"}